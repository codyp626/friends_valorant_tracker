<!DOCTYPE html>
<html lang="en">


<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link href="FriendsTracker.styles.css" rel="stylesheet">
    <link rel="stylesheet" href="app.css" />

    @* FAVICON IMPORT *@
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
    <link rel="manifest" href="/favicon/site.webmanifest">
    <link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#212121">

    @* FONT IMPORT *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">


    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/mouse-wheel-zoom.js"></script>
    <HeadOutlet />
</head>

<body>
    <Routes @rendermode="new InteractiveServerRenderMode(false)" />
    <script src="_framework/blazor.web.js"></script>
    <script>
        function mmrChart(mmrArray, dateArray, puuid) {
            Highcharts.chart(puuid, {

                chart: {
                    type: "area",
                    backgroundColor: "rgb(15,15,15)",
                },

                tooltip: {
                    formatter: function () {
                        return eloToRankString(this.y) + '</b><br>on ' + (new Date(dateArray[this.x] * 1000).getMonth() + 1) + '/' + new Date(dateArray[this.x] * 1000).getDate();
                    },
                    backgroundColor: {
                        linearGradient: [0, 0, 0, 60],
                        stops: [
                            [0, "rgb(20,20,20)"],
                            [1, "rgb(40,40,40)"]
                        ]
                    },
                    style: {
                        color: '#FFFFFF'
                    },
                    borderWidth: 1,
                    borderColor: '#AAA'
                },

                legend: {
                    enabled: false
                },

                title: {
                    text: null,
                },

                xAxis: 
                {
                    visible: true,
                    tickLength: 0,
                    tickWidth: 0,
                    labels:
                    {
                    enabled: false
                    },
                },

        yAxis: {
            visible: false,
            labels:
            {
                enabled: false
            },
            tickLength: 0,
            tickWidth: 0,
            title: 
            {
                text: null,
            },
        },

        credits: {
            enabled: false
        },

        plotOptions:
        {
            series:
            {
                threshold: null,
                    lineWidth: 4,
                        color: "rgb(200,0,0)",
                            marker:
                {
                    enabled: false,
                        }
            }

        },

        series:
        [{
            name: "Elo",
            data: mmrArray
        }],

            responsive: {
            rules: [{
                condition: {
                    maxWidth: 500
                },
            }]
        }

            });


        }

        function eloToRankString(elo) {
            const ranks = ["Iron", "Bronze", "Silver", "Gold", "Plat", "Dia", "Asc"];
            const tierSize = 100;

            // Calculate the base index in ranks array
            let baseRankIndex = Math.floor(elo / (tierSize * 3));
            let adjustedElo = elo % (tierSize * 3);
            let tier = Math.floor(adjustedElo / tierSize) + 1; // 1, 2, or 3
            let rr = adjustedElo % tierSize;

            // Handle cases where elo is beyond the highest defined rank (Ascendant 3)
            if (baseRankIndex >= ranks.length) {
                baseRankIndex = ranks.length; // Set to Immortal
                let immortalElo = elo - (ranks.length * 3 * tierSize);
                tier = Math.floor(immortalElo / tierSize) + 1;
                rr = immortalElo;

                // Cap the tier at 3 for Immortal
                if (tier > 3) {
                    tier = 3;
                }
                return `Immo ${tier}: ${rr} rr`;
            }

            const rank = ranks[baseRankIndex];
            return `${rank} ${tier}: ${rr} rr`;
        }
    </script>
</body>

</html>
